{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","App","useState","ip","myRef","useRef","selectedFile","post","setPost","image","uPost","setUpost","useEffect","axios","get","then","res","data","console","log","useStyles","margin","width","to","path","component","style","display","marginLeft","marginBottom","Grid","container","map","item","key","Paper","opacity","border","height","id","onClick","e","del","target","status","deleteHandler","src","user","exact","type","ref","upload","current","files","undefined","uData","name","document","getElementById","value","address","formData","FormData","append","alert","window","location","reload","uploadHandler","uSearch","userHandler","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9c9c972c.chunk.js","sourcesContent":["import React, {useState, useEffect, useContext, useReducer, useRef} from 'react';\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\nimport TextField from '@material-ui/core/TextField';\nimport axios from 'axios';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\n\nfunction App() {\n  const [ip, setIp] = useState('Memerepository.asuscomm.com')\n  const myRef = useRef({selectedFile: null});\n  const [user,setUser] = useState(\"anon\")\n  const [post,setPost] = useState([{}])\n  const [uPost,setUpost] = useState([{image:`q.png`}])\n  \nuseEffect(() =>  {\n    axios.get(`http://${ip}/api`).then(function (res) {\n    setPost(\n      res.data\n    )\n    console.log(post)\n    })\n  },[]);\n    function userHandler (){\n      let uSearch = document.getElementById('uName').value\n      axios.get(`http://${ip}/api/${uSearch}`).then(function (res) {\n        setUpost(res.data)\n        console.log(uPost)\n      })\n    }\n\n    function deleteHandler(e){\n      let del = {id: e.target.id}\n      axios.post(`http://${ip}/api/delete`,del).then(function (res){\n      console.log(res.status)\n      }\n\n      )\n    }\n\n\n    function uploadHandler() {\n      let upload = myRef.current.files[0]\n      if (upload === undefined){\n        alert(`Please Select a File for Upload`)\n        return\n      }else{\n      let uName = document.getElementById(\"uName\").value\n      let uData = {name: uName, address: upload.name}\n      const formData = new FormData()\n      formData.append(\n      'myFile',\n       upload,\n       upload.name\n  )\n     axios.post(`http://${ip}/api/post`, formData)\n     axios.post(`http://${ip}/api/data`, uData).then(function (res){\n      alert(`Meme Sucessfully Uploaded`);\n      window.location.reload(false);\n    })\n  }\n    }\n\n  \n\n  \n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: 1000,\n    },\n  },\n}));\n\n\n  return (\n\n<div>\n  <Router>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\" >Home</Link>\n            </li>\n            <li>\n              <Link to=\"/10\">10 Newests MEMES</Link>\n            </li>\n            <li>\n              <Link to=\"/users\">Users</Link>\n            </li>\n          </ul>\n        </nav>\n    <Switch>\n     <Route path=\"/10\" component={API} />\n     <Route exact path=\"/\" component={Home} />\n     <Route path=\"/users\" component={users} />\n    </Switch>\n  </Router>\n</div>\n   \n  );\n\n  function Home(){\n    const classes = useStyles();\n    \n\n    return (\n    <div style={{marginLeft: 20}}>Home <p>Welcome to The Smoking Hot Meme Repository, Please Upload Your Memes Below and I Will View Them in My Own Time</p>\n      <input type=\"file\" ref={myRef}/>\n      <p style={{opacity: 0.9}}>&nbsp;User&nbsp;<input id=\"uName\" type=\"text\"/>&nbsp; \n    <button onClick={() => {uploadHandler()}}>Upload!</button></p>\n    </div>\n    )\n  }\n\n  function users(){\n    return(\n      <div><input style={{marginLeft: 20}} id=\"uName\" type=\"text\" />\n      <button onClick={() => {userHandler()}}>SEARCH</button>\n      \n      <Grid container style={{marginLeft: 10}}>\n      \n      {uPost.map((item, key) =>\n      <Paper style={{width: 250, margin: 10}}><img src ={`http://${ip}/${item.image}`} style={{width: 250, height: 250}}/><p style={{textAlign: 'center',width: 250}}>{item.user}</p></Paper>\n       )}\n      \n      </Grid>\n      </div>\n    )\n  }\n\n  function API(){\n    return (\n    <div style={{display: 'grids'}}><p style={{marginLeft: 20,marginBottom: 40}}>TOP 10 MEMES ARE Below</p>\n     <Grid container spacing={10} style={{marginLeft: 10}}>\n    {post.map((item, key) =>\n    <Paper style={{width: 250,margin: 10}}><p style={{opacity:0.1, padding: 0, margin: 0, border: 0, height: 0}}><button id={item.id} onClick={(e) => deleteHandler(e)}>x</button></p><img src ={`http://${ip}/${item.image}`} style={{width: 250, height: 250}}/><p style={{textAlign: 'center',width: 250}}>{item.user}</p></Paper>\n    )}\n    </Grid>\n    </div>\n    )\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}